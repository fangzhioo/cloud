{"version":3,"sources":["src/layouts/SecurityLayout.tsx"],"names":["_react","_interopRequireDefault","__webpack_require__","_dva","_umi","_querystring","_PageLoading","SecurityLayout","_this","_classCallCheck2","default","this","state","isReady","setState","dispatch","props","type","_this$props","children","loading","currentUser","isLogin","undefined","uid","queryString","stringify","redirect","window","location","href","createElement","Redirect","to","concat","Component","connect","_ref","user","models"],"mappings":"oQAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAD,EAAA,QACAE,EAAAF,EAAA,QACAG,EAAAH,EAAA,QAGAI,EAAAL,EAAAC,EAAA,SAWMK,cAAN,SAAAA,IAAA,IAAAC,EAAA,SAAAC,EAAAC,SAAAC,KAAAJ,gEACEC,EAAAI,OACEC,SAAS,GAFbL,sFAMIG,KAAKG,UACHD,SAAS,IAFI,IAIPE,EAAaJ,KAAKK,MAAlBD,SACJA,GACFA,GACEE,KAAM,uDAKN,IACIJ,EAAYF,KAAKC,MAAjBC,QADJK,EAEuCP,KAAKK,MAAxCG,EAFJD,EAEIC,SAAUC,EAFdF,EAEcE,QAASC,EAFvBH,EAEuBG,YAGrBC,EAAUD,QAAmCE,IAApBF,EAAYG,IACrCC,GAAc,EAAApB,EAAAqB,YAClBC,SAAUC,OAAOC,SAASC,OAE5B,OAAMR,GAAWF,IAAaP,EACrBb,EAAAU,QAAAqB,cAACzB,EAAAI,QAAW,MAEhBY,EAGEH,EAFEnB,EAAAU,QAAAqB,cAAC3B,EAAA4B,UAASC,GAAE,eAAAC,OAAiBT,YA9BbzB,EAAAU,QAAMyB,cAoCpB,EAAAhC,EAAAiC,SAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMlB,EAATiB,EAASjB,QAAT,OACrBC,YAAaiB,EAAKjB,YAClBD,QAASA,EAAQmB,OAAOD,OAFX,CAGX/B","file":"layouts__SecurityLayout.async.js","sourcesContent":["import React from 'react';\nimport { connect } from 'dva';\nimport { Redirect } from 'umi';\nimport { stringify } from 'querystring';\nimport { ConnectState, ConnectProps } from '@/models/connect';\nimport { CurrentUser } from '@/models/user';\nimport PageLoading from '@/components/PageLoading';\n\ninterface SecurityLayoutProps extends ConnectProps {\n  loading?: boolean;\n  currentUser?: CurrentUser;\n}\n\ninterface SecurityLayoutState {\n  isReady: boolean;\n}\n\nclass SecurityLayout extends React.Component<SecurityLayoutProps, SecurityLayoutState> {\n  state: SecurityLayoutState = {\n    isReady: false,\n  };\n\n  componentDidMount() {\n    this.setState({\n      isReady: true,\n    });\n    const { dispatch } = this.props;\n    if (dispatch) {\n      dispatch({\n        type: 'user/fetchCurrent',\n      });\n    }\n  }\n\n  render() {\n    const { isReady } = this.state;\n    const { children, loading, currentUser } = this.props;\n    // You can replace it to your authentication rule (such as check token exists)\n    // 你可以把它替换成你自己的登录认证规则（比如判断 token 是否存在）\n    const isLogin = currentUser && currentUser.uid !== undefined;\n    const queryString = stringify({\n      redirect: window.location.href,\n    });\n    if ((!isLogin && loading) || !isReady) {\n      return <PageLoading />;\n    }\n    if (!isLogin) {\n      return <Redirect to={`/user/login?${queryString}`} />;\n    }\n    return children;\n  }\n}\n\nexport default connect(({ user, loading }: ConnectState) => ({\n  currentUser: user.currentUser,\n  loading: loading.models.user,\n}))(SecurityLayout);\n"],"sourceRoot":""}